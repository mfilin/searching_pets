import logging

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram import Bot, Dispatcher, executor, types

from config import bot, dp
from states import Form

from bot_main import age_list, color_list, dog_characters, cat_characters

import time
import bot_main
import db


@dp.message_handler(commands='admin', state ='*')
async def check_admin(message: types.Message):

	if db.check_admin(message.from_user.username) == True:

		add = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞', callback_data='add_new_pet')
		see = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data='see')
		delete = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–∏—Ç–æ–º—Ü–∞', callback_data='delete')
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		keyboard.row(add)
		keyboard.row(see)
		keyboard.row(delete)

		await bot.send_message(message.from_user.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=keyboard)



@dp.callback_query_handler(text='see', state ='*')
async def see_all(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)
	fetched = db.get_all_animals()

	for animal in fetched: 
		try:
			await bot.send_message(query.from_user.id, f"""

{animal[1]}
–ü–æ–ª: <b>{animal[2]}</b>
–í–æ–∑—Ä–∞—Å—Ç: <b>{animal[3]}</b>
–®–µ—Ä—Å—Ç—å: <b>{animal[4]}</b>
–¶–≤–µ—Ç: <b>{animal[5]}</b>
–¢–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: <b>{animal[6]}</b>

–û–ø–∏—Å–∞–Ω–∏–µ:
{animal[0]}

–ù–æ–º–µ—Ä (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è): <b>{animal[8]}</b>
				""",parse_mode=ParseMode.HTML)
			await bot.send_photo(query.from_user.id,animal[7]) 
		except:
			pass
	await check_admin(query)



@dp.callback_query_handler(text='delete', state ='*')
async def delete_pet(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)

	await bot.send_message(query.from_user.id, """
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã.\
–ù–æ–º–µ—Ä –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤'. 

–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —É–¥–∞–ª—è—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'""")


	await Form.DELETING.set()


@dp.message_handler(content_types=['text'], state=Form.DELETING)
async def text(message: types.message, state: FSMContext):

	if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
		await cancel_message(message,state)
	else:
		try:
			db.delete_animal(int(message.text))
		except ValueError:
			await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ ;( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n–ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã —Ü–∏—Ñ—Ä–æ–π")
			return
		await bot.send_message(message.from_user.id, "–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
		await state.finish()
		await check_admin(message)





@dp.callback_query_handler(text='add_new_pet', state ='*')
async def add_new(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)
	dog = types.InlineKeyboardButton('üê∂–°–æ–±–∞–∫–∞', callback_data='–°–æ–±–∞–∫–∞')
	cat = types.InlineKeyboardButton('üêà–ö–æ—à–∫–∞', callback_data='–ö–æ—à–∫–∞')
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.row(cat,dog)
	await bot.send_message(query.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ 1/6\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:", reply_markup=keyboard)
	await Form.ADDING.set()


@dp.callback_query_handler(text='–ö–æ—à–∫–∞', state=Form.ADDING)
@dp.callback_query_handler(text='–°–æ–±–∞–∫–∞', state=Form.ADDING)
async def cat_or_dog(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(cat_or_dog=query.data)
	dog = types.InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='–ñ–µ–Ω—Å–∫–∏–π')
	cat = types.InlineKeyboardButton('–ú—É–∂—Å–∫–æ–π', callback_data='–ú—É–∂—Å–∫–æ–π')
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.row(cat,dog)
	await bot.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ 2/6\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª:",message_id = query.message.message_id, chat_id =  query.message.chat.id)
	await bot.edit_message_reply_markup(reply_markup = keyboard, message_id = query.message.message_id, chat_id =  query.message.chat.id)

@dp.callback_query_handler(text='–ú—É–∂—Å–∫–æ–π', state=Form.ADDING)
@dp.callback_query_handler(text='–ñ–µ–Ω—Å–∫–∏–π', state=Form.ADDING)
async def select_gender(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(gender=query.data)

	buttons = []

	for i in age_list:
		buttons.append((i,i))

	print(buttons)
	keyboard = types.InlineKeyboardMarkup(row_width=2)

	keyboard.add(*(types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons))
	await bot.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ 3/6\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–∏—Ç–æ–º—Ü–∞:",message_id = query.message.message_id, chat_id =  query.message.chat.id)
	await bot.edit_message_reply_markup(reply_markup = keyboard, message_id = query.message.message_id, chat_id =  query.message.chat.id)


@dp.callback_query_handler(lambda c: c.data in age_list, state=Form.ADDING)
async def inline_kb_answer_callback_handler(query: types.CallbackQuery,state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(age=query.data)

	b1 = types.InlineKeyboardButton('–ö–æ—Ä–æ—Ç–∫–∞—è', callback_data='–ö–æ—Ä–æ—Ç–∫–∞—è')
	b2 = types.InlineKeyboardButton('–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è', callback_data='–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è')
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	keyboard.add(b1,b2)
	
	await bot.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ 4/6\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —à–µ—Ä—Å—Ç–∏:",message_id = query.message.message_id, chat_id =  query.message.chat.id)
	await bot.edit_message_reply_markup(reply_markup = keyboard, message_id = query.message.message_id, chat_id =  query.message.chat.id)


@dp.callback_query_handler(text='–ö–æ—Ä–æ—Ç–∫–∞—è', state=Form.ADDING)
@dp.callback_query_handler(text='–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è', state=Form.ADDING)
async def choose_color(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(fur = query.data)

	print('it was a dog!!')
	buttons = []
	for i in color_list:
		buttons.append((i,i))

	async with state.proxy() as data:
		animal_type = data['cat_or_dog']
	if animal_type == '–°–æ–±–∞–∫–∞':
		buttons.pop(-1)
		buttons.pop(-1)
	elif animal_type == '–ö–æ—à–∫–∞':
		buttons.pop(6)
		

	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(*(types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons))
	await bot.edit_message_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ 5/6\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:',message_id = query.message.message_id, chat_id =  query.message.chat.id)
	await bot.edit_message_reply_markup(reply_markup = keyboard, message_id = query.message.message_id, chat_id =  query.message.chat.id)



@dp.callback_query_handler(lambda c: c.data in color_list, state =Form.ADDING)
async def check_character(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(color=query.data)

	async with state.proxy() as data:
		pressed_age = data['age']
	print('pressed age IS::::' + str(pressed_age))
	
	if (age_list[2] in pressed_age) or \
	(age_list[3] in pressed_age) or \
	(age_list[4] in pressed_age) or \
	(age_list[5] in pressed_age):
		await character(query,state)      
	else:
		await bot.edit_message_text('–ü–∏—Ç–æ–º–µ—Ü —Å–ª–∏—à–∫–æ–º –º–∞–ª, –ø–æ—ç—Ç–æ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º',message_id = query.message.message_id, chat_id =  query.message.chat.id)
		time.sleep(2)
		await description(query,state)






async def character(query: types.CallbackQuery, state: FSMContext):

	buttons = []
	async with state.proxy() as data:
		animal_type = data['cat_or_dog']
	if animal_type == '–°–æ–±–∞–∫–∞':
		for i in dog_characters:
			buttons.append((i,i))
	elif animal_type == '–ö–æ—à–∫–∞':
		for i in cat_characters:
			buttons.append((i,i))
   
	keyboard = types.InlineKeyboardMarkup(row_width=2)

	keyboard.add(*(types.InlineKeyboardButton(text, callback_data=data) for text, data in buttons))

	await bot.edit_message_text('6/6\n–¢–∏–ø –•–∞—Ä–∞–∫—Ç–µ—Ä–∞:',message_id = query.message.message_id, chat_id =  query.message.chat.id)
	await bot.edit_message_reply_markup(reply_markup = keyboard, message_id = query.message.message_id, chat_id =  query.message.chat.id)




@dp.callback_query_handler(lambda c: c.data in dog_characters, state =Form.ADDING)
@dp.callback_query_handler(lambda c: c.data in cat_characters, state =Form.ADDING)
async def description(query: types.CallbackQuery, state: FSMContext):
	await state.update_data(character=query.data)
	await bot.send_message(query.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞. \n\n–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏  \
–∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –≤ —á–∞—Ç. –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ.')




@dp.message_handler(content_types=['text'], state=Form.ADDING)
async def add_photo(message: types.message, state: FSMContext):

	await state.update_data(description=message.text)
	await message.reply('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')

	await bot.send_message(message.from_user.id, '–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞.\
 –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ.')


@dp.message_handler(content_types=['photo'], state=Form.ADDING)
async def photo(message: types.message, state: FSMContext):
	print('photo file id was: ' + str(message.photo[0].file_id))
	await state.update_data(photo_id=message.photo[0].file_id)
	await message.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
	async with state.proxy() as data:
		animal_type = data['cat_or_dog']
		gender = data['gender']
		age = data['age']
		fur = data['fur']
		color = data['color']
		character = data['character']
		description = data['description']

	await bot.send_message(message.from_user.id, f"""
{animal_type}
–ü–æ–ª: <b>{gender}</b>
–í–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>
–®–µ—Ä—Å—Ç—å: <b>{fur}</b>
–¶–≤–µ—Ç: <b>{color}</b>
–¢–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: <b>{character}</b>




–û–ø–∏—Å–∞–Ω–∏–µ:
{description}
""",parse_mode = ParseMode.HTML)

	yes = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å', callback_data='–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
	no = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ', callback_data='–û—Ç–º–µ–Ω–∞')
	keyboard = types.InlineKeyboardMarkup(row_width=3)
	keyboard.add(yes,no)
	await bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–∞–∑—É –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ?',reply_markup=keyboard)


@dp.callback_query_handler(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', state=Form.ADDING)
async def add(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	async with state.proxy() as data:
		animal_type = data['cat_or_dog']
		gender = data['gender']
		age = data['age']
		fur = data['fur']
		color = data['color']
		character = data['character']
		description = data['description']
		photo_id = data['photo_id']

	db.new_animal(animal_type, gender, age, fur, color, character,description, photo_id)
	await bot.send_message(query.from_user.id, '–ü–∏—Ç–æ–º–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω!')
	await state.finish()
	
	await check_admin(query)

@dp.callback_query_handler(text='–û—Ç–º–µ–Ω–∞', state=Form.ADDING)
async def cancel(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	await bot.send_message(query.from_user.id, '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞')
	await state.finish()
	await check_admin(query)

async def cancel_message(message: types.message, state: FSMContext):
	await bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞')
	await state.finish()
	await check_admin(message)


