import logging

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor

import admin
import db
from config import bot, dp
from states import Form


@dp.message_handler(commands="start", state="*")
async def cmd_start(message: types.Message):
	choose = types.InlineKeyboardButton("üê∂–ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞", callback_data="choose")
	about_us = types.InlineKeyboardButton("–û –Ω–∞—Å", callback_data="about_us")
	how_to = types.InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞—á–∞ –ø–∏—Ç–æ–º—Ü–∞", callback_data="how_to")
	inst = types.InlineKeyboardButton(
		"–ù–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://www.instagram.com/empasi_net"
	)
	vk = types.InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ –í–ö", url="https://vk.com/empasi_net")
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.row(choose)
	keyboard.add(about_us, how_to, inst, vk)

	await bot.send_message(
		message.from_user.id,
		"üêæ–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≠–º–ø–∞—Å–∏.\n\n\
–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –ø—Ä–∏—é—Ç–∞. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–∏—é—Ç–æ–≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞, \
–∞ —Ç–∞–∫–∂–µ –æ—Ç –Ω–∞—à–∏—Ö –¥—Ä—É–∑–µ–π-–≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤. –ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ.",
		reply_markup=keyboard,
	)


@dp.callback_query_handler(text="about_us", state="*")  # if cb.data == 'yes'
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
	await bot.answer_callback_query(query.id)
	await bot.send_message(query.from_user.id, "–¢—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å")


@dp.callback_query_handler(text="how_to", state="*")  # if cb.data == 'yes'
async def how_to(query: types.CallbackQuery):
	await bot.answer_callback_query(query.id)

	await bot.answer_callback_query(query.id)
	await bot.send_message(
		query.from_user.id, "–¢—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
	)


@dp.callback_query_handler(text="choose", state="*")
async def stat_choosing(query: types.CallbackQuery):
	await bot.answer_callback_query(query.id)

	cat = types.InlineKeyboardButton("üê∂–°–æ–±–∞–∫–∞", callback_data="–°–æ–±–∞–∫–∞")
	dog = types.InlineKeyboardButton("üêà–ö–æ—à–∫–∞", callback_data="–ö–æ—à–∫–∞")
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(cat, dog)
	await Form.CHOOSING.set()
	await bot.send_message(
		query.from_user.id,
		"1/6\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–æ–¥–±–æ—Ä. \n\n\
–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:",
		reply_markup=keyboard,
	)


@dp.callback_query_handler(text="–ö–æ—à–∫–∞", state=Form.CHOOSING)
@dp.callback_query_handler(text="–°–æ–±–∞–∫–∞", state=Form.CHOOSING)
async def gender(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)

	await state.update_data(cat_or_dog=query.data)
	male = types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú—É–∂—Å–∫–æ–π")
	female = types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ–µ–Ω—Å–∫–∏–π")
	both = types.InlineKeyboardButton("–ù–µ–≤–∞–∂–Ω–æ", callback_data="–õ—é–±–æ–π –ø–æ–ª")
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(male, female, both)

	await bot.edit_message_text(
		"2/6\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–∏—Ç–æ–º—Ü–∞:",
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)

	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)


age_list = [
	"2-4 –ú–µ—Å—è—Ü–∞",
	"4-6 –ú–µ—Å—è—Ü–µ–≤",
	"6-12 –ú–µ—Å—è—Ü–µ–≤",
	"1-3 –ì–æ–¥–∞",
	"3-7 –õ–µ—Ç",
	"–°—Ç–∞—Ä—à–µ 7 –ª–µ—Ç",
]


@dp.callback_query_handler(text="–ú—É–∂—Å–∫–æ–π", state=Form.CHOOSING)
@dp.callback_query_handler(text="–ñ–µ–Ω—Å–∫–∏–π", state=Form.CHOOSING)
@dp.callback_query_handler(text="–õ—é–±–æ–π –ø–æ–ª", state=Form.CHOOSING)
async def age(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	await state.update_data(gender=[query.data])
	buttons = []

	for i in age_list:
		buttons.append((i, i))

	keyboard = types.InlineKeyboardMarkup(row_width=2)

	keyboard.add(
		*(
			types.InlineKeyboardButton(text, callback_data=data)
			for text, data in buttons
		)
	)
	keyboard.add(types.InlineKeyboardButton("–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç", callback_data="–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç"))
	keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å1"))

	await bot.edit_message_text(
		'3/6\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–∏—Ç–æ–º—Ü–∞. \n\n\
–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.\
–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.',
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)

	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)

@dp.callback_query_handler(text="–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç", state=Form.CHOOSING)
@dp.callback_query_handler(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å1", state=Form.CHOOSING)
async def fur_type(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)

	got_keyboard = []
	age_output = []

	for i in query.message.reply_markup.inline_keyboard:
		for j in i:
			got_keyboard.append(j.text)

	for i in got_keyboard:
		if i[0] == "‚úÖ":
			age_output.append(i[1:])

	if query.data == '–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç':
		age_output = list(age_list)

	await state.update_data(age=age_output)

	b1 = types.InlineKeyboardButton("–ö–æ—Ä–æ—Ç–∫–∞—è", callback_data="–ö–æ—Ä–æ—Ç–∫–∞—è")
	b2 = types.InlineKeyboardButton(
		"–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è", callback_data="–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è"
	)
	b3 = types.InlineKeyboardButton("–õ—é–±–∞—è", callback_data="–õ—é–±–æ–π —Ç–∏–ø —à–µ—Ä—Å—Ç–∏")
	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(b1, b2, b3)

	await bot.edit_message_text(
		"4/6\n–¢–∏–ø —à–µ—Ä—Å—Ç–∏:",
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)
	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)


color_list = (
	"–ß–µ—Ä–Ω—ã–π",
	"–ë–µ–ª—ã–π",
	"–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π",
	"–†—ã–∂–∏–π",
	"–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π",
	"–î–≤—É—Ö—Ü–≤–µ—Ç–Ω–Ω—ã–π",
	"–ü–∞–ª–µ–≤—ã–π (—Å–≤–µ—Ç–ª—ã–π)",
	"–¢–∏–≥—Ä–æ–≤—ã–π",
	"–ß–µ—Ä–µ–ø–∞—Ö–æ–≤—ã–π",
)


@dp.callback_query_handler(text="–ö–æ—Ä–æ—Ç–∫–∞—è", state=Form.CHOOSING)
@dp.callback_query_handler(text="–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è", state=Form.CHOOSING)
@dp.callback_query_handler(text="–õ—é–±–æ–π —Ç–∏–ø —à–µ—Ä—Å—Ç–∏", state=Form.CHOOSING)
async def choose_color(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)

	await state.update_data(fur=[query.data])

	buttons = []
	for i in color_list:
		buttons.append((i, i))

	async with state.proxy() as data:
		animal_type = data["cat_or_dog"]
	if animal_type == "–°–æ–±–∞–∫–∞":
		buttons.pop(-1)
		buttons.pop(-1)
	elif animal_type == "–ö–æ—à–∫–∞":
		buttons.pop(6)

	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(
		*(
			types.InlineKeyboardButton(text, callback_data=data)
			for text, data in buttons
		)
	)
	keyboard.add(types.InlineKeyboardButton("–õ—é–±–æ–π —Ü–≤–µ—Ç", callback_data="–õ—é–±–æ–π —Ü–≤–µ—Ç"))
	keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2"))
	await bot.edit_message_text(
		"5/6\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)
	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)


@dp.callback_query_handler(lambda c: c.data in cat_characters, state=Form.CHOOSING)
@dp.callback_query_handler(lambda c: c.data in dog_characters, state=Form.CHOOSING)
@dp.callback_query_handler(lambda c: c.data in color_list, state=Form.CHOOSING)
@dp.callback_query_handler(lambda c: c.data in age_list, state=Form.CHOOSING)
async def update_tick(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)
	got_keyboard = []
	for i in query.message.reply_markup.inline_keyboard:
		for j in i:
			got_keyboard.append(j.text)

	cdata_list = []
	for i in query.message.reply_markup.inline_keyboard:
		for j in i:
			cdata_list.append(j.callback_data)

	clicked = cdata_list.index(query.data)

	if got_keyboard[clicked][0] != "‚úÖ":
		got_keyboard[clicked] = "‚úÖ" + got_keyboard[clicked]
	else:
		got_keyboard[clicked] = got_keyboard[clicked][1:]

	for i in range(len(got_keyboard)):
		got_keyboard[i] = (got_keyboard[i], cdata_list[i])

	keyboard = types.InlineKeyboardMarkup(row_width=2)
	keyboard.add(
		*(
			types.InlineKeyboardButton(text, callback_data=data)
			for text, data in got_keyboard[:-2]
		)
	)
	keyboard.row(
		types.InlineKeyboardButton(
			got_keyboard[-2][0], callback_data=got_keyboard[-2][1]
		)
	)
	
	keyboard.row(
		types.InlineKeyboardButton(
			got_keyboard[-1][0], callback_data=got_keyboard[-1][1]
		)
	)
	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)

@dp.callback_query_handler(text="–õ—é–±–æ–π —Ü–≤–µ—Ç", state=Form.CHOOSING)
@dp.callback_query_handler(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å2", state=Form.CHOOSING)
async def check_character(query: types.CallbackQuery, state: FSMContext):
	await bot.answer_callback_query(query.id)

	got_keyboard = []
	color_output = []

	for i in query.message.reply_markup.inline_keyboard:
		for j in i:
			got_keyboard.append(j.text)

	for i in got_keyboard:
		if i[0] == "‚úÖ":
			color_output.append(i[1:])

	if query.data == '–õ—é–±–æ–π —Ü–≤–µ—Ç':
		color_output = list(color_list)

	await state.update_data(color=color_output)

	async with state.proxy() as data:
		pressed_age = data["age"]

	if (
		(age_list[2] in pressed_age)
		or (age_list[3] in pressed_age)
		or (age_list[4] in pressed_age)
		or (age_list[5] in pressed_age)
	):
		await character(query, state)
	else:
		await final(query, state)


dog_characters = ("–•–æ–ª–µ—Ä–∏–∫", 
	"–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", 
	"C–∞–Ω–≥–≤–∏–Ω–∏–∫", 
	"–§–ª–µ–≥–º–∞—Ç–∏–∫"
)
cat_characters = (
	"–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π",
	"–°—Ä–µ–¥–Ω–µ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π",
	"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
	"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π-–∞–∫—Ç–∏–≤–Ω—ã–π",
	"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π-—Å–ø–æ–∫–æ–π–Ω—ã–π",
)

async def character(query: types.CallbackQuery, state: FSMContext):

	buttons = []
	async with state.proxy() as data:
		animal_type = data["cat_or_dog"]
	if animal_type == "–°–æ–±–∞–∫–∞":
		for i in dog_characters:
			buttons.append((i, i))
	elif animal_type == "–ö–æ—à–∫–∞":
		for i in cat_characters:
			buttons.append((i, i))

	keyboard = types.InlineKeyboardMarkup(row_width=2)

	keyboard.add(
		*(
			types.InlineKeyboardButton(text, callback_data=data)
			for text, data in buttons
		)
	)
	keyboard.add(types.InlineKeyboardButton("–õ—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä", callback_data="–õ—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä"))
	keyboard.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="–ó–∞–≤–µ—Ä—à–∏—Ç—å"))

	await bot.edit_message_text(
		"6/6\n–¢–∏–ø –•–∞—Ä–∞–∫—Ç–µ—Ä–∞:",
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)
	await bot.edit_message_reply_markup(
		reply_markup=keyboard,
		message_id=query.message.message_id,
		chat_id=query.message.chat.id,
	)

@dp.callback_query_handler(text="–õ—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä", state=Form.CHOOSING)
@dp.callback_query_handler(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", state=Form.CHOOSING)
async def final(query: types.CallbackQuery, state: FSMContext):

	got_keyboard = []
	character_output = []

	for i in query.message.reply_markup.inline_keyboard:
		for j in i:
			got_keyboard.append(j.text)

	for i in got_keyboard:
		if i[0] == "‚úÖ":
			character_output.append(i[1:])

	if query.data == '–õ—é–±–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä':
		character_output = list(cat_characters) + list(dog_characters)

	async with state.proxy() as data:
		animal_type = data["cat_or_dog"]
		gender = data["gender"]
		age = data["age"]
		fur = data["fur"]
		color = data["color"]

	blank = ", "

	await bot.send_message(
		query.from_user.id,
		f"""–ö–æ–Ω–µ—Ü!
üåø–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:

{animal_type}
–ü–æ–ª: <b>{blank.join(gender)}</b>
–í–æ–∑—Ä–∞—Å—Ç: <b>{blank.join(age)}</b>
–®–µ—Ä—Å—Ç—å: <b>{blank.join(fur)}</b>
–¶–≤–µ—Ç: <b>{blank.join(color)}</b>
–¢–∏–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: <b>{blank.join(character_output)}</b>

–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ:

		""",
		parse_mode=ParseMode.HTML,
	)

	if gender[0] == '–õ—é–±–æ–π –ø–æ–ª':
		gender = ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']
	if fur[0] == '–õ—é–±–æ–π —Ç–∏–ø —à–µ—Ä—Å—Ç–∏':
		fur = ['–î–ª–∏–Ω–Ω–∞—è/–ø—É—à–∏—Å—Ç–∞—è', '–ö–æ—Ä–æ—Ç–∫–∞—è']

	found = db.find_animal(animal_type, gender, age, fur, color, character_output)
	for animal in found:
		await bot.send_photo(query.from_user.id, animal[1])
		await bot.send_message(query.from_user.id, animal[0])


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)
